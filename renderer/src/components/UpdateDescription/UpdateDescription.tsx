import { useState, useEffect } from "react";
import { shallow } from "zustand/shallow";
import { useUpdateStore } from "../../store/updateStore";
import { DisclosureSection } from "../../shared/DisclosureSection";
import { GlobeAltIcon } from "@heroicons/react/24/solid";
import SlackIcon from "../../shared/SlackIcon/SlackIcon";
import { Release } from "./types";

export default function UpdateDescription() {
  const [release, setRelease] = useState<Release | null>();
  const [currentVersion, setCurrentVersion] = useState(
    global.app?.getVersion()
  );
  const [isUpdate, setIsUpdate] = useState(false);
  const [update, setUpdate] = useUpdateStore(
    (state) => [state.update, state.setUpdate],
    shallow
  );

  const [isOpen, setIsOpen] = useState(update?.age === "new");
  const slackDesktopLink = "slack://channel?team=T3PV37ANP&id=C069N5LUP3M";
  const slackWebLink = "https://app.slack.com/client/T3PV37ANP/C069N5LUP3M";

  useEffect(() => {
    global.ipcRenderer.send("get-current-version");

    global.ipcRenderer.on("update-available", (event, data, info) => {
      setIsUpdate(data);
    });

    global.ipcRenderer.on("downloaded", (event, data, info) => {
      setRelease(info);
      setIsOpen(true);
      setUpdate({ age: "new", description: info?.releaseNotes });
    });

    global.ipcRenderer.on("current-version", (event, data) => {
      setCurrentVersion(data);
    });

    return () => {
      global.ipcRenderer.removeAllListeners("update-available");
      global.ipcRenderer.removeAllListeners("downloaded");
      global.ipcRenderer.removeAllListeners("current-version");
    };
  }, []);

  const isOpenToggle = () => {
    if (isOpen) {
      setIsOpen(false);
      setUpdate({ age: "old", description: update?.description });
    } else {
      setIsOpen(true);
      setUpdate({ age: "new", description: update?.description });
    }
  };

  // open autogenerated github message links in a new window
  const addTargetBlankToLink = (htmlString: string) => {
    const tempDiv = document.createElement("div");
    tempDiv.innerHTML = htmlString;

    const links = tempDiv.getElementsByTagName("a");
    for (var i = 0; i < links.length; i++) {
      links[i].target = "_blank";
    }

    return tempDiv.innerHTML;
  };

  const supportClickHandler = (link: string) => {
    global.ipcRenderer.send("redirect", link);
  };

  return (
    <DisclosureSection
      toggleFunction={isOpenToggle}
      isOpen={isOpen}
      title="What's new?"
    >
      <p className="text-xs text-gray-700 font-semibold dark:text-dark-main mb-4">
        Current version {currentVersion} {!isUpdate && "(latest)"}
      </p>

      <div className="flex flex-col my-5 gap-3 ">
        <p className=" text-gray-700 font-semibold dark:text-dark-main">
          You can leave your feedback or questions in our slack channel
        </p>
        <button
          className="flex gap-2 text-blue-700 font-semibold hover:text-blue-800 dark:text-blue-700/70 dark:hover:text-blue-700"
          onClick={() => supportClickHandler(slackDesktopLink)}
        >
          <SlackIcon />
          Open in desktop Slack
        </button>
        <button
          className="flex gap-2 text-blue-700 font-semibold hover:text-blue-800 dark:text-blue-700/70 dark:hover:text-blue-700"
          onClick={() => supportClickHandler(slackWebLink)}
        >
          <GlobeAltIcon className="w-6 h-6 fill-gray-600" />
          Open Slack in the browser
        </button>
      </div>
      <h2 className="font-bold text-gray-700 dark:text-dark-heading">
        In {release?.version ? release?.version : currentVersion} version
      </h2>
      {update?.description ? (
        <div
          className="desc flex flex-col gap-2 mb-3 dark:text-dark-heading"
          dangerouslySetInnerHTML={{
            __html: addTargetBlankToLink(update?.description),
          }}
        ></div>
      ) : (
        <div className="flex flex-col gap-2 mb-3 dark:text-dark-heading">
          Here you will receive notifications about the app's content updates
          after downloading the new version.
        </div>
      )}
    </DisclosureSection>
  );
}
