name: publish release
on:
  push:
    # # Sequence of patterns matched against refs/heads
    # branches:
    #   - main
    #   - master
    # tags:
    #   - v*
  workflow_dispatch:
jobs:
  build:
    # runs-on: ubuntu-latest
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}
      DEBUG: electron-builder
    # container:
    #     image: node:20.5.0
    #     # env:
    #     #   NODE_ENV: development
    #     # ports:
    #     #   - 80
    #     volumes:
    #       - ./:/app
    steps:
      - uses: actions/checkout@v3
      #   - uses: actions/setup-node@v3
      #     with:
      #       node-version: "16"
      #   - run: npm install
      #   - run: npm run build
      #      - run: npm run dist
      #   - run: npm run dist-win

      - name: Get previous tag
        id: get_previous_tag
        # run: echo "::set-output name=previous_tag::$(git describe --tags --abbrev=0)"
        # run: echo "$(git describe --tags --abbrev=0)" >> "$previous_tag" # for Linux
        # run: $env:previous_tag = "$(git describe --tags --abbrev=0)" # for Windows
        # run: echo "action_state=yellow" >> $previous_tag
        run: echo "previous_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"

      - name: Determine new version
        id: determine_version
        # run: echo "::set-output name=version::$(npx semver -i patch ${{ steps.get_previous_tag.outputs.previous_tag }})"
        # run: echo "$(npx semver -i patch ${{ steps.get_previous_tag.outputs.previous_tag }})" >> "$version"
        # run: $env:version = "$(npx semver -i patch ${{ steps.get_previous_tag.outputs.previous_tag }})" # for Windows
        run: echo "version=$(npx semver -i patch ${{ steps.get_previous_tag.outputs.previous_tag }})" >> "$GITHUB_ENV"

      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ env.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            ./dist/*.exe

      #   - name: Create release
      #     id: create_release
      #     uses: actions/create-release@v1
      #     env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     with:
      #       files: dist/*.exe # Change this to the path of your build artifacts
      #       tag_name: ${{ steps.determine_version.outputs.version }}
      #       release_name: Release ${{ steps.determine_version.outputs.version }}
      #       draft: false
      #       prerelease: false

      #   - name: Upload release assets
      #     id: upload_release_assets
      #     uses: actions/upload-release-asset@v1
      #     env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     with:
      #       upload_url: ${{ steps.create_release.outputs.upload_url }}
      #       asset_path: dist/*.exe # Change this to the path of your build artifacts
      #       asset_name: asset.zip # Change this to the desired asset name
      #       asset_content_type: application/zip

      #   - name: Run tmate
      #     uses: mxschmitt/action-tmate@v2

      #   - uses: actions/upload-artifact@v3
      #     with:
      #       name: my-artifact
      #       path: /home/runner/work/tt-test/tt-test/app/
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist/*.exe
